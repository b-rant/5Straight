@using _5Straight.Data
@inject GameManager GameManager
@inject NavigationManager NavigationManager
@inject IModalService Modal
@implements IDisposable


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">5ive Straight</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/GameHistory" Match="NavLinkMatch.All">
                <span class="oi oi-list" aria-hidden="true"></span> Finished Games
            </NavLink>
        </li>
        <li>
            <h4 class="five-nav-headers">Your Open Games</h4>
        </li>
        @{
            foreach (var game in GameManager.Games)
            {
                if (!game.Value.Won && game.Value.Players.Where(x => x.PlayerOwner.Equals(authState.User.Identity.Name)).Any())
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@($"/GameBoard/{game.Value.GameId}")">
                            <span class="oi oi-bookmark" aria-hidden="true"></span> @game.Value.GameName.Substring(0, game.Value.GameName.Length > 20 ? 20 : game.Value.GameName.Length)
                        </NavLink>
                    </li>
                }
            }
        }
    </ul>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    // Game Menu

    void ShowNewGameModal()
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,

        };

        Modal.Show<NewGame>("Create New Game", options);
    }

    protected override async void OnInitialized()
    {
        authState = await authenticationStateTask;
        GameManager.ConnectClientToGameManager(OnNotify);
    }

    public void Dispose()
    {

    }

    public async Task OnNotify()
    {
        await InvokeAsync(() => StateHasChanged());
    }
}
