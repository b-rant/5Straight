@page "/GameBoard/{gameId}"

@using _5Straight.Data
@implements IDisposable
@inject GameManager GameManager
@inject NavigationManager NavigationManager
@inject IToastService toastService


@if (game == null || !game.GameHasStarted)
{
    <h2>Select you player slot!</h2>
    <p>Game will start when all players have selected a player slot</p>
    <div id="GameLobbyView">
        <div class="container lobbyContainer">
            <div class="row">
                @foreach (var team in game.GameState.Teams)
                {
                    <div class="col-md-4">
                        <h3>Team @(team.TeamNumber + 1)</h3>
                        <div id="lobby-team-@team.TeamNumber" class="list-group ">
                            @foreach (var player in team.Players)
                            {
                                if (string.IsNullOrWhiteSpace(player.PlayerOwner))
                                {
                                    <a @onclick="() => SelectPlayerSlot(player.PlayerNumber, authState.User.Identity.Name)" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">Empty Slot</h5>
                                            <small>player @(player.PlayerNumber + 1)</small>
                                        </div>
                                    </a>
                                    if (game.GameState.Teams.Count == 2)
                                    {
                                        <button @onclick="() => SetPlayerAsAi(player.PlayerNumber)" type="button" class="btn btn-outline-dark">Make AI</button>
                                    }
                                }
                                else
                                {
                                    <a class="list-group-item list-group-item-action disabled @((!string.IsNullOrWhiteSpace(player.PlayerOwner) && player.PlayerOwner.Equals(authState.User.Identity.Name)) ? "lobby-owned" : "lobby-filled")" aria-disabled="true">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@(player.PlayerOwner.Split('@')[0])</h5>
                                            <small class="text-muted">player @(player.PlayerNumber + 1)</small>
                                        </div>
                                    </a>
                                }
                            }
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
}
else
{
    <div id="GameBoardView">
        <div class="container playerContainer">
            <div class="row">
                <div class="col-md-12" style="background-color:white">
                    <div class="nav-center">
                        <ul id="playerTabs" class="nav nav-pills" role="tablist">
                            @{
                                foreach (var player in game.GameState.Players)
                                {
                                    <li role="presentation" class="nav-item"><a class="nav-link @(game.GameState.CurrentPlayer.Equals(player) ? "active" : "")">@(player.PlayerOwner.Split('@')[0])</a></li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div id="boardContainer" align="center">
                        <table id="board" align="center">
                            @{
                                int position = 0;
                                for (int i = 0; i < 10; i++)
                                {
                                    <tr>
                                        @{
                                            for (int j = 0; j < 10; j++)
                                            {
                                                int locationNumber = GameStateFactory.positionOrder[position];

                                                string classString = "";

                                                <td class="@(game.GameState.Board.Where(x => x.Number.Equals(locationNumber)).FirstOrDefault().FilledBy?.Team?.TeamColor ?? classString)" @onclick="() => MakePlay(locationNumber)" id="@locationNumber">@locationNumber</td>
                                                position++;
                                            }
                                        }
                                    </tr>
                                }
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
        @if (game.GameState.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerOwner) && x.PlayerOwner.Equals(authState.User.Identity.Name)).Any())
        {
            var player = game.GameState.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerOwner) && x.PlayerOwner.Equals(authState.User.Identity.Name)).First();
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div id="cardContainer" align="center">
                            @for (int i = 0; i < 4; i++)
                            {
                                @if (player.Hand.Count >= i + 1)
                                {
                                    int card = i;
                                    <button type="button" class="btn btn-outline-primary btn-lg @(selectedCard.Equals(card) ? "active" : "")" @onclick="() => SelectCard(card)">@(player.Hand[i])</button>
                                }
                            }
                            @if (player.Hand.Count <= 3)
                            {
                                <button type="button" class="btn btn-outline-success btn-lg" @onclick="() => MakeDraw()">Draw Card</button>
                            }
                        </div>
                    </div>
                    
                </div>
            </div>
        }
        else
        {
            <h5> You are in Spectator Mode, you can watch the game but cannot play.</h5>
        }
    </div>
}


@code {

    // Init
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;

    protected async override void OnInitialized()
    {
        try
        {
            authState = await authenticationStateTask;
            game = GameManager.Games[gameId];

            GameManager.ConnectClientToGame(gameId, OnNotify);
        }
        catch
        {
            NavigationManager.NavigateTo("");
        }
    }

    public async Task OnNotify()
    {
        var player = game.GameState.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerOwner) && x.PlayerOwner.Equals(authState.User.Identity.Name)).First();
        await InvokeAsync(() => StateHasChanged());
        var latestPlay = game.GetMostRecentPlay();
        if (game.GameState.Won)
        {
            if (player.Team.TeamNumber.Equals(game.GameState.WinningPlayer.Team.TeamNumber))
            {
                toastService.ShowSuccess("Congrats! You Won!!", "GAME OVER!");
            }
            else
            {
                toastService.ShowWarning($"Team {game.GameState.WinningPlayer.Team.TeamNumber + 1} won the game!", "GAME OVER!");
            }
        }
        else if (latestPlay.PlayerNumber.Equals(player.PlayerNumber))
        {
            if (latestPlay.Draw)
            {
                toastService.ShowSuccess($"You drew the {latestPlay.CardNumber} card", "Draw");
            }
            else
            {
                toastService.ShowSuccess($"You played the {latestPlay.CardNumber} in the {latestPlay.PlayedLocationNumber}", "Play");
            }
        }
        else
        {
            if (latestPlay.Draw)
            {
                toastService.ShowInfo($"{game.GameState.Players[latestPlay.PlayerNumber].PlayerOwner.Split('@')[0]} drew a card", "Draw");
            }
            else
            {
                toastService.ShowInfo($"{game.GameState.Players[latestPlay.PlayerNumber].PlayerOwner.Split('@')[0]} played the {latestPlay.CardNumber} in the {latestPlay.PlayedLocationNumber}", "Play");
            }
        }
    }

    public void Dispose()
    {

    }

    // Game Lobby

    public async void SelectPlayerSlot(int playerId, string userName)
    {
        if (GameManager.UserSelectPlayerSlot(gameId, playerId, userName))
        {
            playerNumber = playerId;
        }
    }

    public async void SetPlayerAsAi(int playerId)
    {
        GameManager.AiSelectPlayerSlot(gameId, playerId);
    }

    // Game Board
    [Parameter]
    public string gameId { get; set; }
    public Game game;
    int selectedCard;
    int playerNumber = -1;

    public async void MakePlay(int locationNumber)
    {
        var player = game.GameState?.Players?.Where(x => !string.IsNullOrWhiteSpace(x.PlayerOwner) && x.PlayerOwner.Equals(authState.User.Identity.Name)).FirstOrDefault();

        if (player == null)
        {
            toastService.ShowError("You are not a player in this game.", "Error");
            return;
        }

        if (game.GameState.CurrentPlayer != player)
        {
            toastService.ShowError("It is not your turn to play.", "Error");
            return;
        }

        if (player.Hand.Count <= selectedCard)
        {
            toastService.ShowError("Select a valid card before you play.", "Error");
            return;
        }

        var response = game.PlayLocation(game.GameState.CurrentPlayer, locationNumber, game.GameState.CurrentPlayer.Hand[selectedCard]);
        if (!string.IsNullOrWhiteSpace(response))
        {
            toastService.ShowError(response, "");
        }

    }

    public async void MakeDraw()
    {
        var player = game.GameState?.Players?.Where(x => !string.IsNullOrWhiteSpace(x.PlayerOwner) && x.PlayerOwner.Equals(authState.User.Identity.Name)).FirstOrDefault();

        if (player == null)
        {
            toastService.ShowError("You are not a player in this game.", "Error");
            return;
        }

        var response = game.PlayDrawCard(player);
        if (!string.IsNullOrWhiteSpace(response))
        {
            toastService.ShowError(response, "Error");
        }
    }

    public void SelectCard(int cardSlot)
    {
        selectedCard = cardSlot;
    }

}
