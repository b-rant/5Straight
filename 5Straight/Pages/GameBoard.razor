@page "/GameBoard/{gameId}"

@using _5Straight.Data
@using _5Straight.Data.Models
@using System.Text;
@using System.Security.Claims; 
@implements IDisposable
@inject GameManager GameManager
@inject NavigationManager NavigationManager
@inject IToastService toastService


@if (game == null || !game.GameHasStarted)
{
    <h2>Select you player slot!</h2>
    <p>Game will start when all players have selected a player slot</p>
    <div id="GameLobbyView">
        <div class="container lobbyContainer">
            <div class="row">
                @foreach (var team in game.Teams)
                {
                    <div class="col-md-4">
                        <h3>Team @(team.TeamNumber + 1)</h3>
                        <div id="lobby-team-@team.TeamNumber" class="list-group ">
                            @foreach (var player in team.Players)
                            {
                                if (string.IsNullOrWhiteSpace(player.PlayerId))
                                {
                                    <a @onclick="() => SelectPlayerSlot(player.PlayerNumber, authState.User.FindFirstValue(ClaimTypes.NameIdentifier), authState.User.FindFirstValue(ClaimTypes.GivenName))" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">Empty Slot</h5>
                                            <small>player @(player.PlayerNumber + 1)</small>
                                        </div>
                                    </a>
                                    <button @onclick="() => SetPlayerAsAi(player.PlayerNumber)" type="button" class="btn btn-outline-dark">Add AI</button>
                                }
                                else
                                {
                                    <a class="list-group-item list-group-item-action disabled @((!string.IsNullOrWhiteSpace(player.PlayerId) && player.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))) ? "lobby-owned" : "lobby-filled")" aria-disabled="true">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@(player.PlayerName)</h5>
                                            <small class="text-muted">player @(player.PlayerNumber + 1)</small>
                                        </div>
                                    </a>
                                    if (player.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier)))
                                    {
                                        <button @onclick="() => DeSelectPlayerSlot(player.PlayerNumber)" type="button" class="btn btn-outline-dark">Leave Player Slot</button>
                                    }
                                    if (player.Npc != null)
                                    {
                                        <button @onclick="() => RemovePlayerAsAi(player.PlayerNumber)" type="button" class="btn btn-outline-dark">Remove AI</button>
                                    }
                                }
                            }
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
}
else
{
    if (showGameInfo)
    {
        <div id="GameInfoView">
            <div class="container">
                <div class="row">
                    <button style="margin-bottom:1rem;" type="button" class="btn btn-outline-dark btn-sm" @onclick="() => SwitchBoardView()">Show Game Board</button>
                    <div class="col-md-12">
                        <h3>Previous Plays</h3>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Turn Number</th>
                                    <th scope="col">Player</th>
                                    <th scope="col">Play Type</th>
                                    <th scope="col">Location Played</th>
                                    <th scope="col">Card Used</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var orderedPlays = game.Plays.OrderBy(x => x.TurnNumber).ToList();
                                    if (game.Won && !game.DeadCardDraw)
                                    {
                                        <tr>
                                            <td>Team @(game.WinningPlayer.Team.TeamNumber+1) Wins!</td>
                                            <td>@game.WinningPlayer.PlayerName</td>
                                            <td>Play</td>
                                            <td>@orderedPlays.Last().PlayedLocationNumber</td>
                                            <td>@orderedPlays.Last().CardNumber</td>
                                        </tr>
                                    }
                                    else if (game.DeadCardDraw)
                                    {
                                        <tr>
                                            <td colspan="5">Game ended in a draw</td>
                                        </tr>
                                    }
                                    for (int i = game.Plays.Count - 1; i >= 0; i--)
                                    {
                                        var play = orderedPlays[i];
                                        var player = game.Players.Where(p => p.PlayerNumber.Equals(play.PlayerNumber)).FirstOrDefault();
                                        <tr>
                                            <td>@play.TurnNumber</td>
                                            <td>@player.PlayerName</td>
                                            <td>@(play.Draw ? "Draw" : "Play")</td>
                                            @if (!play.Draw)
                                            {
                                                <td>@play.PlayedLocationNumber</td>
                                                <td>@play.CardNumber</td>
                                            }
                                            else
                                            {
                                                <td></td>
                                                <td></td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div id="GameBoardView">
            <div class="container playerContainer">
                <div class="row">
                    <button style="margin-bottom:1rem;" type="button" class="btn btn-outline-dark btn-sm" @onclick="() => SwitchBoardView()">Show Game Info</button>
                    <div class="col-md-12" style="background-color:white">
                        <div class="nav-center">
                            <ul id="playerTabs" class="nav nav-pills" role="tablist">
                                @{
                                    foreach (var p in game.Players)
                                    {
                                        if (p.Team.TeamNumber == 0)
                                        {
                                            <li role="presentation" class="nav-item "><a style="pointer-events: none;" class="nav-link btn-outline-dark @(game.CurrentPlayer.Equals(p) ? "active boardShadowTeam0" : "")">@(p.PlayerName)</a></li>
                                        }
                                        else if (p.Team.TeamNumber == 1)
                                        {
                                            <li role="presentation" class="nav-item "><a style="pointer-events: none;" class="nav-link btn-outline-dark @(game.CurrentPlayer.Equals(p) ? "active boardShadowTeam1" : "")">@(p.PlayerName)</a></li>
                                        }
                                        else
                                        {
                                            <li role="presentation" class="nav-item "><a style="pointer-events: none;" class="nav-link btn-outline-dark @(game.CurrentPlayer.Equals(p) ? "active boardShadowTeam2" : "")">@(p.PlayerName)</a></li>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container" id="boardUberContainer">
                <div class="row">
                    <div class="col-md-12">
                        <div id="boardContainer" align="center">
                            @{
                                
                                string shadowClass = "boardShadow";
                                @if (game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).Any())
                                {
                                    var player = game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).First();
                                    if (game.CurrentPlayer.Equals(player) && !game.Won)
                                    {
                                        shadowClass = "boardShadowPlayerTurn";
                                    }
                                }
                                <table id="board" align="center" class="@shadowClass">
                                    @{
                                        int position = 0;
                                        for (int i = 0; i < 10; i++)
                                        {
                                            <tr>
                                                @{
                                                    for (int j = 0; j < 10; j++)
                                                    {
                                                        int locationNumber = GameFactory.positionOrder[position];

                                                        StringBuilder classString = new StringBuilder("");
                                                        BoardLocation location = game.Board.Where(x => x.Number.Equals(locationNumber)).FirstOrDefault();

                                                        Play lastPlay = game.Plays.OrderBy(x => x.TurnNumber).ToList().LastOrDefault();
                                                        classString.Append(location.FilledBy?.Team?.TeamColor ?? "");
                                                        if (lastPlay != null && !lastPlay.Draw && lastPlay.PlayedLocationNumber.Equals(locationNumber))
                                                        {
                                                            classString.Append(" boardLastPlayedLoc");
                                                        }
                                                        @if (game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).Any())
                                                        {
                                                            var player = game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).First();
                                                            if (!location.Filled && !selectedCard.Equals(-1) && game.CurrentPlayer.Equals(player) && player.Hand[selectedCard] <= locationNumber)
                                                            {
                                                                classString.Append($" boardPlayable playerTeam{player.Team.TeamNumber}");
                                                            }
                                                        }
                                                        <td class="@classString.ToString()" @onclick="() => MakePlay(locationNumber)" id="@locationNumber">@locationNumber</td>
                                                        position++;
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                </table>
                            }
                        </div>
                    </div>
                </div>
            </div>
            @if (!game.Won && game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).Any())
            {
                var player = game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).First();
                string cardShadowClass = "boardShadow";
                if (game.CurrentPlayer.Equals(player))
                {
                    cardShadowClass = "boardShadowPlayerTurn";
                }

                <Row Margin="Margin.IsAuto">
                    <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                        <Card Background="Background.Light" WhiteText="false" Style="color:black" Class="@cardShadowClass">
                            <CardBody Margin="Margin.Is0" Style="">
                                @if (game.CurrentPlayer.Equals(player))
                                {
                                    @for (int i = 0; i < 4; i++)
                                    {
                                        @if (player.Hand.Count >= i + 1)
                                        {
                                            int card = i;
                                            <button type="button" class="btn btn-outline-dark btn-lg @(selectedCard.Equals(card) ? "active" : "")" @onclick="() => SelectCard(card)">@(player.Hand[i])</button>
                                        }
                                    }
                                    @if (player.Hand.Count <= 3 && game.Deck.Any())
                                    {
                                        <button type="button" class="btn btn-outline-success btn-lg" @onclick="() => MakeDraw()">Draw Card</button>
                                    }
                                }
                                else
                                {
                                    @for (int i = 0; i < 4; i++)
                                    {
                                        @if (player.Hand.Count >= i + 1)
                                        {
                                            int card = i;
                                            <button type="button" class="btn btn-outline-dark btn-lg disabled">@(player.Hand[i])</button>
                                        }
                                    }
                                    @if (player.Hand.Count <= 3 && game.Deck.Any())
                                    {
                                        <button type="button" class="btn btn-outline-success btn-lg disabled" >Draw Card</button>
                                    }
                                }
                            </CardBody>
                        </Card>
                    </Column>
                </Row>

            }
            else if (!game.Won)
            {
                <Alert Color="Color.Primary" Visible="true"> You are in Spectator Mode. You can watch this game, but cannot play.</Alert>
            }
            else if (game.Won)
            {
                 <Row Margin="Margin.IsAuto">
                     <Column  ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                         <Heading Style="text-align: center;" Size="HeadingSize.Is3">Game Over!</Heading>
                         <Table>
                             <TableHeader>
                                 <TableRow>
                                     <TableHeaderCell>Winning Team</TableHeaderCell>
                                     <TableHeaderCell>Winning Player</TableHeaderCell>
                                     <TableHeaderCell>Winning Play</TableHeaderCell>
                                 </TableRow>
                             </TableHeader>
                             <TableBody>
                                 @if (game.DeadCardDraw)
                                 {
                                     <TableRow>
                                         <TableRowCell ColumnSpan="3">Game ended in a Draw</TableRowCell>
                                     </TableRow>
                                 }
                                 else
                                 {
                                     var lastPlay = game.Plays.OrderBy(x => x.TurnNumber).ToList().Last();
                                     <TableRow>
                                         <TableRowCell>@(game.WinningPlayer.Team.TeamNumber+1)</TableRowCell>
                                         <TableRowCell>@game.WinningPlayer.PlayerName</TableRowCell>
                                         <TableRowCell>@lastPlay.CardNumber in the @lastPlay.PlayedLocationNumber</TableRowCell>
                                     </TableRow>
                                 }
                             </TableBody>
                         </Table>
                         <Heading Style="text-align: center;" Size="HeadingSize.Is5">Ending Hands</Heading>
                         <Table>
                             <TableHeader>
                                 <TableRow>
                                     <TableHeaderCell>Player</TableHeaderCell>
                                     <TableHeaderCell>Hand</TableHeaderCell>
                                 </TableRow>
                             </TableHeader>
                             <TableBody>
                                @foreach (var player in game.Players)
	                            {
		                            <TableRow>
                                        <TableRowCell>@player.PlayerId</TableRowCell>
                                        <TableRowCell>
                                            @foreach (var card in player.Hand)
                                            {
                                                <button type="button" class="btn btn-outline-dark btn-lg disabled">@card</button>
                                            }
                                        </TableRowCell>
                                    </TableRow>
	                            }
                             </TableBody>
                         </Table>
                     </Column>
                </Row>
            }
        </div>
    }
}


@code {

    // Init
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            authState = await authenticationStateTask;
            game = GameManager.Games[gameId];
            mostRecentShowedPlay = game.TurnNumber;

            GameManager.ConnectClientToGame(gameId, OnNotify);
        }
        catch
        {
            NavigationManager.NavigateTo("");
        }
    }

    public async Task OnNotify()
    {
        var players = game.Players.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier)));
        Player player = players.Any() ? players.First() : null;
        await InvokeAsync(() => StateHasChanged());
        var latestPlays = game.GetMostRecentPlays(mostRecentShowedPlay);
        foreach (var play in latestPlays)
        {
            if (player == null)
            {
                if (play.Draw)
                {
                    toastService.ShowInfo($"{game.Players[play.PlayerNumber].PlayerName} drew a card", "Draw");
                }
                else
                {
                    toastService.ShowInfo($"{game.Players[play.PlayerNumber].PlayerName} played the {play.CardNumber} in the {play.PlayedLocationNumber}", "Play");
                }
            }
            else if (play.PlayerNumber.Equals(player.PlayerNumber))
            {
                if (play.Draw)
                {
                    toastService.ShowSuccess($"You drew the {play.CardNumber} card", "Draw");
                }
                else
                {
                    toastService.ShowSuccess($"You played the {play.CardNumber} in the {play.PlayedLocationNumber}", "Play");
                }
            }
            else
            {
                if (play.Draw)
                {
                    toastService.ShowInfo($"{game.Players[play.PlayerNumber].PlayerName} drew a card", "Draw");
                }
                else
                {
                    toastService.ShowInfo($"{game.Players[play.PlayerNumber].PlayerName} played the {play.CardNumber} in the {play.PlayedLocationNumber}", "Play");
                }
            }
            mostRecentShowedPlay++;
        }
        if (latestPlays.Any() && game.Won && !game.DeadCardDraw)
        {
            if (player != null && player.Team.TeamNumber.Equals(game.WinningPlayer.Team.TeamNumber))
            {
                toastService.ShowSuccess("Congrats! You Won!!", "GAME OVER!");
            }
            else
            {
                toastService.ShowWarning($"Team {game.WinningPlayer.Team.TeamNumber + 1} won the game!", "GAME OVER!");
            }
        }
        if (game.DeadCardDraw)
        {
            toastService.ShowWarning($"Game ended in a draw due to dead cards", "GAME OVER!");
        }
    }

    public void Dispose()
    {
        GameManager.DisconnectClientFromGame(gameId, OnNotify);
    }

    // Game Lobby

    public async void SelectPlayerSlot(int playerId, string userId, string userGivenName)
    {
        if (GameManager.UserSelectPlayerSlot(gameId, playerId, userId, userGivenName))
        {
            playerNumber = playerId;
        }
    }

    public async void DeSelectPlayerSlot(int playerId)
    {
        if (GameManager.UserDeSelectPlayerSlot(gameId, playerId))
        {
            playerNumber = -1;
        }
    }

    public void SetPlayerAsAi(int playerId)
    {
        GameManager.AiSelectPlayerSlot(gameId, playerId);
    }

    public void RemovePlayerAsAi(int playerId)
    {
        GameManager.AiDeselectPlayerSlot(gameId, playerId);
    }

    // Game Board
    [Parameter]
    public string gameId { get; set; }
    public Game game;
    int selectedCard = -1;
    int playerNumber = -1;
    int mostRecentShowedPlay;
    bool showGameInfo;

    public async void MakePlay(int locationNumber)
    {
        var player = game?.Players?.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).FirstOrDefault();

        if (player == null)
        {
            //toastService.ShowError("You are not a player in this game.", "Error");
            return;
        }

        if (game.CurrentPlayer != player)
        {
            //toastService.ShowError("It is not your turn to play.", "Error");
            return;
        }

        if (selectedCard == -1 || player.Hand.Count <= selectedCard)
        {
            //toastService.ShowError("Select a valid card before you play.", "Error");
            return;
        }

        var response = GameManager.UserMakePlay(gameId, player, false, locationNumber, game.CurrentPlayer.Hand[selectedCard]);
        if (!string.IsNullOrWhiteSpace(response))
        {
            toastService.ShowError(response, "");
        }
        selectedCard = -1;
    }

    public async void MakeDraw()
    {
        var player = game?.Players?.Where(x => !string.IsNullOrWhiteSpace(x.PlayerId) && x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier))).FirstOrDefault();

        if (player == null)
        {
            toastService.ShowError("You are not a player in this game.", "Error");
            return;
        }

        var response = GameManager.UserMakePlay(gameId, player, true);
        if (!string.IsNullOrWhiteSpace(response))
        {
            toastService.ShowError(response, "Error");
        }
        selectedCard = -1;
    }

    public void SelectCard(int cardSlot)
    {
        if (selectedCard == cardSlot)
        {
            selectedCard = -1;
        }
        else
        {
            selectedCard = cardSlot;
        }
    }

    public void SwitchBoardView()
    {
        if (showGameInfo)
        {
            showGameInfo = false;
        }
        else
        {
            showGameInfo = true;
        }
    }

}
