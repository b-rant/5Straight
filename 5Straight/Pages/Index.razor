@page "/"
@using _5Straight.Data
@using Blazorise
@using Blazorise.DataGrid
@implements IDisposable
@inject IModalService Modal
@inject NavigationManager NavigationManager
@inject GameManager GameManager

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Open Games</CardTitle>
            </CardHeader>
            <CardBody>
                <CardText Margin="Margin.Is3">Create a new game or join an open game! <Button class="btn btn-primary" Clicked="ShowNewGameModal">Create New Game</Button></CardText>

                <DataGrid TItem="Game" Data="@Games.Values.Where(x => !x.GameHasStarted)" Sortable="true" Filterable="true" Editable="false" ShowPager="true" PageSize="5" Striped="false" Bordered="true">
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameId)" Caption="Game ID" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameName)" Caption="Game Name" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Teams" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var teams = (context as Game)?.Teams;
                                @($"{teams.Count()}")
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Teams)" Caption="Players" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var players = (context as Game)?.Players;
                                var openPlayers = (context as Game)?.Players.Where(x => x.PlayerOwner.Equals(""));
                                @($"{players.Count()-openPlayers.Count()}/{players.Count()} Filled")
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Join Game" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var game = (context as Game);
                                var openPlayers = game?.Players.Where(x => x.PlayerOwner.Equals(""));
                                if (openPlayers.Any())
                                {
                                    <Button class="btn btn-primary" Clicked="() => DirectToGame(game.GameId)">Join</Button>
                                }
                                else
                                {
                                    <Button class="btn btn-primary" Clicked="() => DirectToGame(game.GameId)">Watch</Button>
                                }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Live Games</CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="Game" Data="@Games.Values.Where(x => x.GameHasStarted && !x.Won)" Sortable="true" Filterable="true" Editable="false" ShowPager="true" PageSize="5" Striped="false" Bordered="true">
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameId)" Caption="Game ID" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameName)" Caption="Game Name" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.TurnNumber)" Caption="Turn Number" Editable="false" Sortable="false" Filterable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Join/Watch Game" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var game = (context as Game);
                                var ownedPlayer = game?.Players.Where(x => x.PlayerOwner.Equals(authState.User.Identity.Name));
                                if (ownedPlayer.Any())
                                {
                                    <Button class="btn btn-primary" Clicked="() => DirectToGame(game.GameId)">Continue Playing</Button>
                                }
                                else
                                {
                                    <Button class="btn btn-primary" Clicked="() => DirectToGame(game.GameId)">Watch</Button>
                                }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>



@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;
    private Dictionary<string, Game> Games;

    protected override async void OnInitialized()
    {
        authState = await authenticationStateTask;
        GameManager.ConnectClientToGameManager(OnNotify);
        Games = GameManager.Games;
    }

    public async Task OnNotify()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    void ShowNewGameModal()
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true
        };

        Modal.Show<NewGame>("Create New Game", options);
    }

    public void DirectToGame(string gameId)
    {
        NavigationManager.NavigateTo($"GameBoard/{gameId}", true);
    }

    public void Dispose()
    {

    }

}


