@page "/"
@using _5Straight.Data
@using Blazorise
@using Blazorise.DataGrid
@using System.Security.Claims
@implements IDisposable
@inject NavigationManager NavigationManager
@inject GameManager GameManager

<Row> 
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle Size="4" Weight="TextWeight.Bold">Open Games<Button style="float:right;" class="btn btn-sm btn-primary" Clicked="ShowModal">New Game</Button></CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="Game" Data="@Games.Values.Where(x => !x.GameHasStarted)" Sortable="true" Filterable="true" Editable="false" ShowPager="true" PageSize="10" Striped="false" Bordered="true">
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameName)" Caption="Game Name" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Teams" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var teams = (context as Game)?.Teams;
                                @($"{teams.Count()}")
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Teams)" Caption="Players" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var players = (context as Game)?.Players;
                                var openPlayers = (context as Game)?.Players.Where(x => x.PlayerId.Equals(""));
                                @($"{players.Count()-openPlayers.Count()}/{players.Count()}")
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Join" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var game = (context as Game);
                                var openPlayers = game?.Players.Where(x => x.PlayerId.Equals(""));
                                if (openPlayers.Any())
                                {
                                    <a class="btn btn-sm btn-primary" href="@($"/GameBoard/{game.GameId}")">Join</a>
                                }
                                else
                                {
                                    <a class="btn btn-sm btn-primary" href="@($"/GameBoard/{game.GameId}")">Watch</a>
                                }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle Size="4" Weight="TextWeight.Bold">Live Games</CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="Game" Data="@Games.Values.Where(x => x.GameHasStarted && !x.Won)" Sortable="true" Filterable="true" Editable="false" ShowPager="true" PageSize="10" Striped="false" Bordered="true">
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameName)" Caption="Game Name" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.TurnNumber)" Caption="Turn" Editable="false" Sortable="false" Filterable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="Join/Watch" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var game = (context as Game);
                                var ownedPlayer = game?.Players.Where(x => x.PlayerId.Equals(authState.User.FindFirstValue(ClaimTypes.NameIdentifier)));
                                if (ownedPlayer.Any())
                                {
                                    <a class="btn btn-sm btn-primary" href="@($"/GameBoard/{game.GameId}")">Continue</a>
                                }
                                else
                                {
                                    <a class="btn btn-sm btn-primary" href="@($"/GameBoard/{game.GameId}")">Watch</a>
                                }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>

<Modal @ref="newGameModalRef">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <ModalTitle>
                New Game
            </ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <NewGame />
        </ModalBody>
    </ModalContent>
</Modal>



@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;
    private Modal newGameModalRef;

    private Dictionary<string, Game> Games = new Dictionary<string, Game>();

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        GameManager.ConnectClientToGameManager(OnNotify);
        Games = GameManager.Games;
    }

    public async Task OnNotify()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        GameManager.DisconnectClientFromGameManager(OnNotify);
    }

    private void ShowModal()
    {
        newGameModalRef.Show();
    }

    private void HideModal()
    {
        newGameModalRef.Hide();
    }

}


