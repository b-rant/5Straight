@page "/GameHistory"

@using _5Straight.Data
@using Blazorise
@using Blazorise.DataGrid
@implements IDisposable
@inject NavigationManager NavigationManager
@inject GameManager GameManager

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Finished Games</CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="Game" Data="@FilteredGames" Sortable="true" Filterable="true" Editable="false" ShowPager="true" PageSize="5" Striped="false" Bordered="true">
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameId)" Caption="Game ID" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.GameName)" Caption="Game Name" Editable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.TurnNumber)" Caption="Turns" Editable="false" Sortable="false" Filterable="false"></DataGridColumn>
                    <DataGridColumn TItem="Game" Field="@nameof(Game.Players)" Caption="View" Editable="false" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            @{
                                var game = (context as Game);
                                <a class="btn btn-primary" href="@($"/GameBoard/{game.GameId}")">View</a>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>



@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;
    private Dictionary<string, Game> Games;
    private List<Game> FilteredGames;

    protected override async void OnInitialized()
    {
        authState = await authenticationStateTask;
        GameManager.ConnectClientToGameManager(OnNotify);
        Games = GameManager.Games;
        FilteredGames = Games.Values.Where(x => x.Won).ToList();
    }

    public async Task OnNotify()
    {
        FilteredGames = Games.Values.Where(x => !x.Won).ToList();
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        GameManager.DisconnectClientFromGameManager(OnNotify);
    }

}
